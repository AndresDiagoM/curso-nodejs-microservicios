openapi: "3.0.3"
info:
  title: "Platzi Social"
  description: |
    Whether you're a seasoned developer or diving into the world of Node.js, this course provides a deep dive into the intricacies of building robust, scalable, and secure applications.

    Key Topics Covered:

    Authentication Mastery:

      - Explore advanced authentication techniques using JWT (JSON Web Tokens).
      - Implement OAuth and OpenID Connect for secure user authentication.
      - Secure your applications against common authentication vulnerabilities.

    Microservices Architecture:

      - Understand the principles of microservices and their advantages.
      - Learn to design, deploy, and manage microservices-based applications.
      - Implement communication between microservices using RESTful APIs and messaging queues.

    Redis Integration:

      - Harness the power of Redis for caching and session management.
      - Implement efficient data storage and retrieval with Redis.
      - Explore advanced use cases for Redis in a Node.js environment.

    _Get ready to elevate your Node.js skills and embark on a journey toward mastering authentication, microservices, and Redis integration! Enroll now and unlock the full potential of Node.js in modern application development._

    Git repository of the course: [NodeJs-platzi-course-microservices](https://github.com/AndresDiagoM/curso-nodejs-microservicios)
  termsOfService: "http://swagger.io/terms/"
  version: "0.0.1"
servers:
  - url: "https://petstore3.swagger.io/api/v3"
tags:
  - name: "user"
    description: "Operations about user"
paths:
  /user:
    get:
      tags:
        - "user"
      summary: "User's list"
      description: "This can only be done by the logged in user."
      operationId: "getUsers"
      responses:
        default:
          description: "successful operation"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/User"
            application/xml:
              schema:
                $ref: "#/components/schemas/User"
    post:
      tags:
        - "user"
      summary: "Create user"
      description: "This can only be done by the logged in user."
      operationId: "createUser"
      requestBody:
        description: "Created user object"
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/User"
          application/xml:
            schema:
              $ref: "#/components/schemas/User"
          application/x-www-form-urlencoded:
            schema:
              $ref: "#/components/schemas/User"
      responses:
        default:
          description: "successful operation"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/User"
            application/xml:
              schema:
                $ref: "#/components/schemas/User"
    put:
      tags:
        - "user"
      summary: "Updated user"
      description: "This can only be done by the logged in user."
      operationId: "updateUser"
      parameters:
        - name: "id"
          in: "path"
          description: "id of the user that needs to be updated"
          required: true
          schema:
            type: "string"
      requestBody:
        description: "Updated user object"
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/User"
          application/xml:
            schema:
              $ref: "#/components/schemas/User"
          application/x-www-form-urlencoded:
            schema:
              $ref: "#/components/schemas/User"
      responses:
        default:
          description: "successful operation"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/User"
            application/xml:
              schema:
                $ref: "#/components/schemas/User"
    patch:
      tags:
        - "user"
      summary: "Updated user"
      description: "This can only be done by the logged in user."
      operationId: "updateUser"
      requestBody:
        description: "Updated user object"
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/User"
          application/xml:
            schema:
              $ref: "#/components/schemas/User"
          application/x-www-form-urlencoded:
            schema:
              $ref: "#/components/schemas/User"
      responses:
        default:
          description: "successful operation"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/User"
            application/xml:
              schema:
                $ref: "#/components/schemas/User"
    delete:
      tags:
        - "user"
      summary: "Delete user"
      description: "This can only be done by the logged in user."
      operationId: "deleteUser"
      responses:
        default:
          description: "successful operation"
  post:
    get:
      tags:
        - "post"
      summary: "Post's list"
      description: "This can only be done by the logged in Post."
      operationId: "getPosts"
      responses:
        default:
          description: "successful operation"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Post"
            application/xml:
              schema:
                $ref: "#/components/schemas/Post"
    post:
      tags:
        - "post"
      summary: "Create post"
      description: "This can only be done by the logged in Post."
      operationId: "createPost"
      requestBody:
        description: "Created post object"
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Post"
          application/xml:
            schema:
              $ref: "#/components/schemas/Post"
          application/x-www-form-urlencoded:
            schema:
              $ref: "#/components/schemas/Post"
      responses:
        default:
          description: "successful operation"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Post"
            application/xml:
              schema:
                $ref: "#/components/schemas/Post"
    put:
      tags:
        - "post"
      summary: "Updated post"
      description: "This can only be done by the logged in Post."
      operationId: "updatePost"
      parameters:
        - name: "id"
          in: "path"
          description: "id of the post that needs to be updated"
          required: true
          schema:
            type: "string"
      requestBody:
        description: "Updated post object"
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Post"
          application/xml:
            schema:
              $ref: "#/components/schemas/Post"
          application/x-www-form-urlencoded:
            schema:
              $ref: "#/components/schemas/Post"
      responses:
        default:
          description: "successful operation"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Post"
            application/xml:
              schema:
                $ref: "#/components/schemas/Post"
    patch:
      tags:
        - "post"
      summary: "Updated post"
      description: "This can only be done by the logged in Post."
      operationId: "updatePost"
      requestBody:
        description: "Updated post object"
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Post"
          application/xml:
            schema:
              $ref: "#/components/schemas/Post"
          application/x-www-form-urlencoded:
            schema:
              $ref: "#/components/schemas/Post"
      responses:
        default:
          description: "successful operation"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Post"
            application/xml:
              schema:
                $ref: "#/components/schemas/Post"
    delete:
      tags:
        - "post"
      summary: "Delete post"
      description: "This can only be done by the logged in Post."
      operationId: "deletePost"
      responses:
        default:
          description: "successful operation"
components:
  schemas:
    User:
      type: "object"
      properties:
        id:
          type: "string"
          example: "111"
        username:
          type: "string"
          example: "theUser"
        firstName:
          type: "string"
          example: "John"
        lastName:
          type: "string"
          example: "James"
        email:
          type: "string"
          example: "john@email.com"
        password:
          type: "string"
          example: "12345"
        phone:
          type: "string"
          example: "12345"
        userStatus:
          type: "integer"
          description: "User Status"
          format: "int32"
          example: 1
    Post:
      type: "object"
      properties:
        id:
          type: "string"
          example: "111"
        text:
          type: "string"
          example: "theUser"
        user:
          type: "string"
          example: "John"
        date:
          type: "string"
          example: "James"
        likes:
          type: "string"
          example: "12345"
        comments:
          type: "string"
          example: "12345"
    ApiResponse:
      type: "object"
      properties:
        code:
          type: "integer"
          format: "int32"
        type:
          type: "string"
        message:
          type: "string"
      xml:
        name: "##default"
  requestBodies:
    UserArray:
      description: "List of user object"
      content:
        application/json:
          schema:
            type: "array"
            items:
              $ref: "#/components/schemas/User"
  securitySchemes:
    petstore_auth:
      type: "oauth2"
      flows:
        implicit:
          authorizationUrl: "https://petstore3.swagger.io/oauth/authorize"
          scopes:
            write:pets: "modify pets in your account"
            read:pets: "read your pets"
    api_key:
      type: "apiKey"
      name: "api_key"
      in: "header"